package KieRule;

import java.util.List;

import java.util.stream.Collectors
import java.util.ArrayList
import java.util.Map;
import java.util.HashMap
import lavka.drools.model.entity.Product
import lavka.drools.model.entity.User
import lavka.drools.model.entity.RelationUserProduct
import lavka.drools.model.entity.Diet.DietType
import lavka.drools.model.entity.Diet
import lavka.drools.model.entity.Ingredient
import lavka.drools.model.entity.RelationUserIngredient;

function boolean checkForbiddenItems(Product product, String forbiddenIngredients) {
    String[] forbiddenIngredientsList = forbiddenIngredients.split(",");

    for (String ingredient : forbiddenIngredientsList) {

        if (product.getComposition().toLowerCase().contains(ingredient.toLowerCase())) {
            return false;
        }

        if (product.getName().toLowerCase().contains(ingredient.toLowerCase())) {
            return false;
        }
    }

    return true;
}

function boolean dietAvailable(List list, int id) {
    return ((List<Object>)list.stream()
    .filter(o -> ((Diet)o).getId() == id)
    .collect(Collectors.toList()))
    .size() > 0;
}

function boolean checkProductCategory(Product product, DietType dietType) {
    for (Long restrictedCategoryId : dietType.getDietRestrictionModel().getRestrictedCategoriesIds()) {
        if (String.valueOf(product.getFoodCode()).startsWith(String.valueOf(restrictedCategoryId))) {
            return false;
        }
    }

    return true;
}

function boolean checkProductRestrictedItems(Product product, DietType dietType) {
    for (String restrictedItem : dietType.getDietRestrictionModel().getRestrictedItems()) {
        if (product.getName() != null) {
            if (product.getName().toLowerCase().contains(restrictedItem.toLowerCase())) {
                return false;
            }
        }

        if (product.getComposition() != null) {
            if (product.getComposition().length() > 0 && product.getComposition().toLowerCase().contains(restrictedItem.toLowerCase())) {
                return false;
            }
        }
    }

    return true;
}

function void addProductToUserList(User user, Product product) {
    user.addProductToList(product);
}

function void deleteProductFromUserList(User user, Product product) {
    user.deleteProductFromList(product);
}

rule "Forbidden products"
salience 1
when
    product : Product (composition != null && name != null)
    user: User (forbiddenIngredients != null, checkForbiddenItems(product, user.forbiddenIngredients) == false)
then
    deleteProductFromUserList(user, product);
end;

rule "Fat loss add"
salience 9
when
    user: User (dietAvailable(followedDiets, DietType.FAT_LOSS.getId()))
    product : Product (checkProductCategory(product, DietType.FAT_LOSS) == true && checkProductRestrictedItems(product, DietType.FAT_LOSS))
then
    addProductToUserList(user, product);
end;

rule "Fat loss delete"
salience 5
when
    user: User (dietAvailable(followedDiets, DietType.FAT_LOSS.getId()))
    product : Product (checkProductCategory(product, DietType.FAT_LOSS) == false || checkProductRestrictedItems(product, DietType.FAT_LOSS) == false)
then
    deleteProductFromUserList(user, product);
end;

rule "Vegan add"
salience 10
when
    user: User (dietAvailable(followedDiets, DietType.VEGAN.getId()))
    product : Product (checkProductCategory(product, DietType.VEGAN) == true && checkProductRestrictedItems(product, DietType.VEGAN))
then
    addProductToUserList(user, product);
end;

rule "Vegan delete"
salience 5
when
    user: User (dietAvailable(followedDiets, DietType.VEGAN.getId()))
    product : Product (checkProductCategory(product, DietType.VEGAN) == false || checkProductRestrictedItems(product, DietType.VEGAN) == false)
then
    deleteProductFromUserList(user, product);
end;
