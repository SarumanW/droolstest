package KieRule;

import java.util.List;

import java.util.stream.Collectors
import java.util.ArrayList
import java.util.Map;
import java.util.HashMap
import lavka.drools.model.entity.Product
import lavka.drools.model.entity.User
import lavka.drools.model.entity.RelationUserProduct
import lavka.drools.model.entity.Diet.DietType
import lavka.drools.model.entity.Diet
import lavka.drools.model.entity.Ingredient
import lavka.drools.model.entity.RelationUserIngredient;

function boolean checkForbiddenItems(Product product, List forbiddenIngredientsRelations) {
    List<Ingredient> forbiddenIngredients = (List<Ingredient>) forbiddenIngredientsRelations.stream()
        .map(r -> ((RelationUserIngredient)r).getIngredient())
        .collect(Collectors.toList());

    for (Ingredient ingredient : forbiddenIngredients) {
        if (product.getComposition().contains(ingredient.getName())) {
            return false;
        }
    }

    return true;
}

function boolean dietAvailable(List list, int id) {
    return ((List<Object>)list.stream()
    .filter(o -> ((Diet)o).getId() == id)
    .collect(Collectors.toList()))
    .size() > 0;
}

function boolean checkProductCategory(Product product, DietType dietType) {
    for (Long restrictedCategoryId : dietType.getDietRestrictionModel().getRestrictedCategoriesIds()) {
        if (String.valueOf(product.getFoodCode()).startsWith(String.valueOf(restrictedCategoryId))) {
            return false;
        }
    }

    return true;
}

function boolean checkProductRestrictedItems(Product product, DietType dietType) {
    for (String restrictedItem : dietType.getDietRestrictionModel().getRestrictedItems()) {
        if (product.getName() != null) {
            if (product.getName().toLowerCase().contains(restrictedItem.toLowerCase())) {
                return false;
            }
        }

        if(product.getComposition() != null) {
            if (product.getComposition().length() > 0 && product.getComposition().contains(restrictedItem)) {
                return false;
            }
        }
    }

    return true;
}

function void addProductToUserList(User user, Product product) {
    user.addProductToList(product);
}

rule "Forbidden products"
//timer ( cron:* 0/15 * * * ? )
when
    product : Product (composition != null && name != null)
    user: User (forbiddenIngredients.size() != 0, checkForbiddenItems(product, user.forbiddenIngredients) == true)
then
    addProductToUserList(user, product);
end;

rule "Fat loss"
//timer ( cron:* 0/15 * * * ? )
when
    user: User (dietAvailable(followedDiets, DietType.FAT_LOSS.getId()))
    product : Product (checkProductCategory(product, DietType.FAT_LOSS) == true && checkProductRestrictedItems(product, DietType.FAT_LOSS))
then
    addProductToUserList(user, product);
end;
