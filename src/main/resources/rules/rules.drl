package KieRule;
import com.drools.model.entity.User;
import com.drools.model.entity.Product;
import com.drools.model.entity.Diet;
import com.drools.model.entity.RelationUserProduct;
import com.drools.model.entity.Diet.DietType;

import java.util.List;
import org.apache.commons.collections4.CollectionUtils
import java.util.stream.Collectors;

global java.util.Map userProductsMap;

function int compareTwoLists (List composition, List forbiddenProductsRelations) {
    List<Product> forbiddenProducts = (List<Product>) forbiddenProductsRelations.stream()
        .map(r -> ((RelationUserProduct)r).getProduct())
        .collect(Collectors.toList());

    return CollectionUtils.intersection(composition, forbiddenProducts).size();
}

function boolean dietAvailable(List list, String property) {
    return ((List<Object>)list.stream()
    .filter(o -> ((Diet)o).getName().equals(property))
    .collect(Collectors.toList())).size() > 0;
}

rule "Forbidden products"
timer ( cron:* 0/15 * * * ? )
when
product : Product (composition.size() != 0)
user: User (forbiddenProducts.size() != 0, compareTwoLists(product.composition, user.forbiddenProducts) > 0)
then
userProductsMap.put(user.getId(), product);
end;

rule "Fat loss"
timer ( cron:* 0/15 * * * ? )
when
product : Product()
user: User (dietAvailable(followedDiets, DietType.FAT_LOSS.getDietName()))
then
userProductsMap.put(user.getId(), product);
end;
